# -*- coding: utf-8 -*-
"""StockMarketAnalyst.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LvaqAfRZbUfFMC1buS0_5IQ4AsvP62t5
"""

# Author : Enis Kaan Tasoren 09/2020 
# Artificial recurrent neural network to predict closing price of a stock using the past data.
# Uses LSTM
#LSTM network expect the input to be 3-dimentional ! in the form of a (number of samples / number of time steps / number of features)

#Libs
import sys
import math
import pandas_datareader as web
import numpy as np
import pandas.testing as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Data Source
stock = web.DataReader('SISE.IS' , data_source = 'yahoo' , start = '2010-01-01' , end = '2020-10-30') # years

#Getting the shape 
stock.shape

#Visualizing the stock
plt.figure(figsize=(16,8))
plt.title('History')
plt.plot(stock['Close'])
plt.xlabel('Date' , fontsize=18)
plt.ylabel('Close Price' , fontsize = 18)
plt.show()

#Dataframe

data = stock.filter(['Close'])

#Convert the dataframe to a numpy array
dataset = data.values

#Get the number of rows to train the model on
training_data_len = math.ceil( len(dataset) * .9) #%90 of the data
                                                  #math.ceil() round up the data !
training_data_len

#Scaling the data 
#We are always scaling the data becouse its adventegious to scale/preprocess/transforme/normalize the input data !

scaler = MinMaxScaler(feature_range=(0,1)) #Scaling the data between 0 - 1
scaled_data = scaler.fit_transform(dataset) #Holds scaled dataset

#Training Dataset
#This dataset is scaled !

train_data = scaled_data[0:training_data_len , :] #takes collums 
#splits data into x_train and y_train data sets
x_train = [] # TAKES INDEXES BETWEEN 0 AND 99
y_train = [] # TAKES 100TH VALUE THAT WE WANT TO PREDICT

for i in range(100 , len(train_data)):
  x_train.append(train_data[i-100:i , 0])
  y_train.append(train_data[i,0])
  if i <= 100:
    print(x_train)
    print(y_train)
    print()

#Convert x_train and y_train to numpy arrays
x_train = np.array(x_train)
y_train = np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0] , x_train.shape[1] , 1))

#LSTM MODEL
model = Sequential()
model.add(LSTM(50, return_sequences=True , input_shape =  (x_train.shape[1] , 1)))
model.add(LSTM(50 ,return_sequences = False))
model.add(Dense(100)) #  Neurons
model.add(Dense(1))

model.compile(optimizer = 'adam' , loss = 'mean_squared_error') #Using loss function to see how well the model workes

model.fit(x_train , y_train , batch_size=1 , epochs=1)

#testing data
test_data = scaled_data[training_data_len - 100:  , :]
#data sets x_test y_test
x_test = []
y_test = dataset[training_data_len: , :] #collums
for i in range(100, len(test_data)):
  x_test.append(test_data[i-100:i , 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0]  , x_test.shape[1] , 1))

#Predicted price value

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions) #unsclaing values !

#RMSE
rmse = np.sqrt(((predictions - y_test) ** 2).mean()) #error degree , 0 is perfect !
rmse

train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(16,8))
plt.title('^IXIC')
plt.xlabel('Date' , fontsize = 18)
plt.ylabel('Close Price' , fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close' , 'Predictions']])
plt.legend(['Train' , 'Value', 'Predictions'], loc='lower right')
valid

stock_quote = web.DataReader('SISE.IS' , data_source = 'yahoo' , start = '2010-01-01' , end = '2020-10-06')#GIVES PREDICTION FOR THE NEXT DAY OF THIS
new_data = stock_quote.filter(['Close'])
last_100_days = new_data[-100:].values

last_100_days_scaled = scaler.transform(last_100_days) # 0 - 1

x_test2 = []

x_test2.append(last_100_days_scaled)
x_test2 = np.array(x_test2)
x_test2= np.reshape(x_test2, ( x_test2.shape[0] , x_test2.shape[1] , 1))
predicted_price = model.predict(x_test2)

predicted_price = scaler.inverse_transform(predicted_price)

print(predicted_price)
valid

#stock_quote2 = web.DataReader('SISE.IS' , data_source='yahoo' ,  start = '2020-09-28' , end= '2020-09-28')

last2 = valid.last('2D')
last2

#Prediction
PredictedValue = 0
secoundlast = last2['Predictions'].iloc[0]
finallast = last2['Predictions'].iloc[1]
if secoundlast + rmse/2  < finallast:
    PredictedValue = 1
if secoundlast - rmse/2 > finallast:
    PredictedValue = 2

PredictedValue

def MSA():
  return PredictedValue;

print(PredictedValue)
